* Inbox
** [2022-04-15 Пт 15:36] I think it should be done because of the signals registration. (Model passes the OS signal from the bottom up)
AlbumModel::AlbumModel(QObject* parent) :
    QAbstractListModel(parent),

[[file:~/repo/Mastering-Qt-5/Chapter_04/gallery-core/AlbumModel.cpp::AlbumModel::AlbumModel(QObject* parent) :
 QAbstractListModel(parent),]]
** [2022-04-15 Пт 15:21] just there the model of the album is created and is get passing down the model classes
    AlbumModel* albumModel = new AlbumModel(this);

[[file:~/repo/Mastering-Qt-5/Chapter_04/gallery-desktop/MainWindow.cpp::AlbumModel* albumModel = new AlbumModel(this);]]
** [2022-04-15 Пт 15:12] the magic of transfering windowtables into internal's class representation
    ui->albumListWidget->setModel(albumModel);

[[file:~/repo/Mastering-Qt-5/Chapter_04/gallery-desktop/GalleryWidget.cpp::ui->albumListWidget->setModel(albumModel);]]
** [2022-03-04 Пт 11:05] what the fucking lambda
    connect(ui->previousButton, &QPushButton::clicked, [this] () {
        QModelIndex currentModelIndex = mSelectionModel->currentIndex();
        QModelIndex previousModelIndex = mSelectionModel->model()->index(currentModelIndex.row() - 1, 0);
        mSelectionModel->setCurrentIndex(previousModelIndex, QItemSelectionModel::SelectCurrent);

[[file:~/repo/Mastering-Qt-5/Chapter_04/gallery-desktop/PictureWidget.cpp::connect(ui->previousButton, &QPushButton::clicked, \[this\] () {
 QModelIndex currentModelIndex = mSelectionModel->currentIndex();
 QModelIndex previousModelIndex = mSelectionModel->model()->index(currentModelIndex.row() - 1, 0);
 mSelectionModel->setCurrentIndex(previousModelIndex, QItemSelectionModel::SelectCurrent);]]
** [2022-03-03 Чт 21:02] thereis no need a Q_OBJECT macro btw...hm...


[[file:~/repo/Mastering-Qt-5/Chapter_04/gallery-desktop/ThumbnailProxyModel.h][file:~/repo/Mastering-Qt-5/Chapter_04/gallery-desktop/ThumbnailProxyModel.h]]
** [2022-03-03 Чт 20:23] the view knows how to handle pixmap !!!
    return *mThumbnails[filepath];

[[file:~/repo/Mastering-Qt-5/Chapter_04/gallery-desktop/ThumbnailProxyModel.cpp::return *mThumbnails\[filepath\];]]
** [2022-03-03 Чт 20:09] interesting deletion, isn't it ?
    qDeleteAll(mThumbnails);

[[file:~/repo/Mastering-Qt-5/Chapter_04/gallery-desktop/ThumbnailProxyModel.cpp::qDeleteAll(mThumbnails);]]
** [2022-03-02 Wed 21:50] looks like strange constructor copy original pointer or something
    unique_ptr<Picture>newPicture(new Picture(picture));

[[file:~/repo/Mastering-Qt-5/Chapter_04/gallery-core/PictureModel.cpp::unique_ptr<Picture>newPicture(new Picture(picture));]]
** [2022-02-25 Пт 10:10] Album it widget class is just data holder; addAlbum() will use it to create and store the real object with a unique ID.
    unique_ptr<Album> newAlbum(new Album(album));

[[file:~/repo/Mastering-Qt-5/Chapter_04/gallery-core/AlbumModel.cpp::unique_ptr<Album> newAlbum(new Album(album));]]
** [2022-02-25 Пт 09:59] The two setters will mainly be used to set the model and the selection model of alubmList. Out QListView class will then automatically request the model (AlbumMode) to get the row count and Qt::DisplaRole (the album's name) for each one of them.
    void setModel(AlbumModel* model);

[[file:~/repo/Mastering-Qt-5/Chapter_04/gallery-desktop/AlbumListWidget.h::void setModel(AlbumModel* model);]]
